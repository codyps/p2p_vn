= Design =

== Data Structures ==

.the following must be thread safe.

 - routing_t -main_ routing: is populated via the link state data as well as
	our own dp data.

 - direct peer group: all the directly connected peers. Intended to prevent
	the creation of multiple connections to the same peer.

.the following are for passing data around.

== Program Flow ==

listener thread::
	- Given the routing_t, dpg, and specification for where to listen.
	- Waits for a peer to connect.
	- On connect, adds the peer to the dpg.
		- if the add fails, closes the connection
		- otherwise, spawns a in_dp_th to handle the connections
	- Returns to waiting for a peer to connect.

direct peer th::
	- Note: There are a few different entry points to this thread (from
	  other threads).
	- Waits for the state of its peer connection fd to change, or for a
	  timeout to occour.
	- On timeout: send link-state and probe packets.
	- On fd status change:
		- if error (remote peer closed connection, etc) remove the
		  connection.
		- else, read packet and decide on processing.

lnet dev th::
	- very similar to the peer thread, but reads from the local net device
	  (has slightly different symantics).

outgoing dp th::
	- attmpts to connect to a dp and then "join" the network.
		- Once joined, it adds an appropriate link to the routing
		  table.
		- And then drops control to the `dp_th`.
	- on failure to connect/join, remove itself from the dp_list and exit.

incomming dp th::
	- waits for a join packet.
		- If recieved, adds an appropriate link to the routing table.
		- And then drops control to the `dp_th`.

== TCP transport protocol ==

All packets header::
 - 2 byte type
 - 2 byte length

Data::
 - max 2048 bytes raw data

Part / Join::
 - 
